

set hlsearch
set noincsearch

" disable * from jumping with the curser to the next occurence
nnoremap * *N
let  @/='hilight_this'

set nowrapscan
set nowrap
set noswapfile

" replace tabs with spaces.
au FileType c   set noexpandtab
au FileType cpp set noexpandtab
au FileType vim set expandtab
au FileType sh set expandtab
au FileType txt set expandtab
au FileType awk set expandtab
au FileType make set noexpandtab
au FileType python set noexpandtab
au FileType xml set expandtab
au FileType gdb set expandtab

" show a column marker to help keep the code
" shorter than 80 chars.
" to disable set cc=
" au FileType c,cpp set colorcolumn=80
" hi ColorColumn ctermbg=lightgrey guibg=lightgrey
"
" show column designator on the cursor
" set cursorcolumn or cuc
"
" another method to be notified about passing the 80 chars line is
" to color the passing char
au FileType c,cpp call matchadd('ColorColumn', '\%80v', 100)


"  __  __
" |  \/  | ___  _  _  ___ ___
" | |\/| |/ _ \| || |(_-</ -_)
" |_|  |_|\___/ \_,_|/__/\___|
"

set mouse=a
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end

"              _    _                     _           __   __ 
"  _ __  _  _ | |_ | |_   ___  _ _    ___| |_  _  _  / _| / _|
" | '_ \| || ||  _|| ' \ / _ \| ' \  (_-<|  _|| || ||  _||  _|
" | .__/ \_, | \__||_||_|\___/|_||_| /__/ \__| \_,_||_|  |_|  
" |_|    |__/                                                 
" 
au FileType python set makeprg=python\ %
au FileType sh set makeprg=./%
au FileType python command! R let f=expand("%")|vnew|execute '.!python "' . f . '"'
au FileType sh     command! R let f=expand("%")|vnew|execute '.! /bin/bash "' . f . '"'
" au FileType cpp    command! R make %
" au FileType cpp command! -nargs=1 R | vnew | execute ".! ./<f-args>" 
command! RR :bd!

set encoding=utf-8


"           _               
"  __  ___ | | ___  _ _  ___
" / _|/ _ \| |/ _ \| '_|(_-<
" \__|\___/|_|\___/|_|  /__/
                          
"
" colorscheme yonic_2
" colorscheme desert
" colorscheme desertink
" colorscheme  molokai
colorscheme  candycode
" au FileType c,cpp,h colorscheme candycode
" colorscheme railcasts
" colorscheme Benokai
" au FileType c,cpp,sh,perl colorscheme desert
" au FileType vim colorscheme peaksea
" au FileType sh colorscheme peaksea
au FileType txt colorscheme darkbone
" au FileType txt colorscheme darkzen
" au FileType make colorscheme peaksea
" au FileType awk colorscheme peaksea
" au FileType xml colorscheme peaksea
" au FileType xsd colorscheme peaksea
" au FileType python colorscheme peaksea
" au FileType spec colorscheme peaksea
" au FileType diff colorscheme koehler
" au FileType svn colorscheme peaksea


" if !has("gui_running")
"     colorscheme peaksea
" endif

" if has("gui_running")
"   " GUI is running or is about to start.
"   " Maximize gvim window.
"   set lines=999 columns=999
" else
"   " This is console Vim.
"   if exists("+lines")
"     set lines=50
"   endif
"   if exists("+columns")
"     set columns=100
"   endif
" endif


"
"                 _  _  _             
"  ___ _ __  ___ | || |(_) _ _   __ _ 
" (_-<| '_ \/ -_)| || || || ' \ / _` |
" /__/| .__/\___||_||_||_||_||_|\__, |
"     |_|                       |___/ 
"
" CTRL-X s -  to find suggestions
" to turn off :set nospell
" click z= to see correction options for misspled work under cursor
"
" turn spelling on
setlocal spell spelllang=en_us
set nospell
" map CTRL-p to switch spelling on/off
map <F3> :set spell!<cr>

" auto complete words using the files set in dictionary
" with the CTRL-X,CTRL-K 
" (not be confused with CTRL-p completes words from open buffers )
" map <C-F6> :call Update_dict()<cr>
function! Update_dict ()
   !~/.vim/update_dictionary.sh
   source ~/.vim/.vimrc.dictionary
endfunc
if !empty(glob("~/.vim/.vimrc.dictionary"))
        source ~/.vim/.vimrc.dictionary
endif
" set dictionary=/usr/share/dict/words
"
filetype plugin on
set omnifunc=syntaxcomplete#Complete



let g:netrw_liststyle=3
let g:netrw_keepdir=0
set lcs=tab::\ ,eol:$,trail:. "
set nolist

set completeopt=menuone,menu,longest,preview

" default for complete is to search the /usr/include path 
" when you click ctrl-p. remove it here to speed up search
set complete-=i
"   ___  ___  ___  ___
"  / __|| _ \| __|| _ \
" | (_ ||   /| _| |  _/
"  \___||_|_\|___||_|
"
" set grepprg=grep\ -nHr\ --exclude=*svn*\ --include=*.cpp\ --include=*\.\[c,h\]\
" set grepprg=grep\ -nHr\ --exclude=tags\ --exclude=*svn*\
" command! Grepc :grep --include=*cpp\ --include=*h\ --include=*hpp\ <cr>
" au FileType c   set grepprg=grep\ -nHr\ --exclude=*svn*\ --exclude=tags\ --include=*.cpp\ --include=*\.\[c,h\]\ --exclude=*.log\ --exclude=*.vpj\ --exclude=*.git*\
" au FileType cpp set grepprg=grep\ -nHr\ --exclude=*svn*\ --exclude=tags\ --include=*.cpp\ --include=*\.\[c,h\]\ --exclude=*.log\ --exclude=*.vpj\ --exclude=*.git*\
" au FileType c,cpp   set grepprg=grep\ -nHr\ --include=*.cpp\ --include=*\.\[c,h\]\
au FileType c,cpp   set grepprg=ag\ --cc\ 




map <F11> :cp<cr>
map <F12> :cn<cr>
map <S-F9> :colder<cr>
map <S-F10> :cnewer<cr>

map <S-s> :w<CR>
noremap <S-l> :set nohlsearch!<CR> 
" map <S-h> :/ababababababababab<CR> 
map <C-n> :set nu!<CR>


" surround selected text with quotes.
" map <F2> c"<C-R>""<ESC>xx
map <F2> ciw"<esc>pa"<esc>
vmap <F2> c"<esc>pa"<esc>

" insert the date
map <F5> a<C-R>=strftime("%A %d/%m/%Y")<CR><Esc>
" map <F5> a<C-R>=strftime("%d %b %Y %H:%M")<CR><Esc>
" map <F5> a========== <C-R>=strftime("%A %d %b %Y %H:%M")<CR> ========================<Esc>

" map <C-q><C-a> :qa!<CR>
" map <C-a> :q!
" map <C-a><C-a> :qa!
" map <C-q><C-q> :qa!
map <C-w><C-w> :qa!

" redraw screen up/downward while keeping cursor in the middle of the screen
map <C-y> kzz
map <C-e> jzz
vmap <f12> :s/\s\+$//<CR>

" CTRL-i will go into insert mode and press ENTER 
" same as 'o' but takes the rest of the line with it
" map <C-i> i<cr>

" delete trailing spaces in the entire file
" map <S-t> :%s/\s\+$//<CR>

map <S-y> yiw


" all files should have this tab setting 
" except text files 
au FileType c     set tabstop=8
au FileType c     set shiftwidth=8
au FileType cpp   set tabstop=8
au FileType cpp   set shiftwidth=8

au FileType make   set tabstop=4
au FileType make   set shiftwidth=4
au FileType sh  set tabstop=4
au FileType sh  set shiftwidth=4
au FileType python  set tabstop=4
au FileType python  set shiftwidth=4
au FileType diff  set tabstop=4
au FileType diff  set shiftwidth=4
au FileType txt set tabstop=3
au FileType txt set shiftwidth=3
au FileType xml set tabstop=4
au FileType xml set shiftwidth=4
au FileType gdb set tabstop=4
au FileType gdb set shiftwidth=4



"   ___                               _       
"  / __| ___  _ __   _ __   ___  _ _ | |_  ___
" | (__ / _ \| '  \ | '  \ / -_)| ' \|  _|(_-<
"  \___|\___/|_|_|_||_|_|_|\___||_||_|\__|/__/
"                                             

" comment shortcut for different file types.
" add unrecognized file types definitions in 
" .vim/ftdetect/mine.vim
" 
" filetype plugin on
" au FileType cpp vmap <S-c> :s/^/\/\/\ /g<CR>:nohl<CR> 
" au FileType c vmap <S-c> :s/^/\/\/\ /g<CR>:nohl<CR> 
" au FileType sh vmap <S-c> :s/^/#\ /g<CR>:nohl<CR>
" au FileType conf vmap <S-c> :s/^/#\ /g<CR>:nohl<CR>
" au FileType python vmap <S-c> :s/^/#\ /g<CR>:nohl<CR>
" au FileType spec vmap <S-c> :s/^/#\ /g<CR>:nohl<CR>
" au FileType make vmap <S-c> :s/^/#\ /g<CR>:nohl<CR>
" au FileType vim vmap <S-c> :s/^/"\ /g<CR>:nohl<CR>

" for some reason this does not work
" comment lines shortcut
" if &ft=='c' || &ft=='cpp'
" vmap <S-c> :s/^/\/\/\ /g<CR>:nohl<CR>
" else
" vmap <S-c> :s/^/#\ /g<CR>:nohl<CR>
" endif

" Commenting blocks of code.
autocmd FileType c,cpp,java,scala let b:comment_leader = '// '
autocmd FileType sh,ruby,python   let b:comment_leader = '# '
autocmd FileType make             let b:comment_leader = '# '
autocmd FileType conf,fstab       let b:comment_leader = '# '
autocmd FileType tex              let b:comment_leader = '% '
autocmd FileType mail             let b:comment_leader = '> '
autocmd FileType vim              let b:comment_leader = '" '
noremap <silent> ,cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>==<CR>
noremap <silent> ,cu :<C-B>silent <C-E>s/^.*\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>==<CR>



" show/unshow hidded characters.
map <C-j> :set list!<CR>

" --------------------
" highlight trailing spaces
" --------------------
" method 1
" autocmd FileType c,cpp highlight ExtraWhitespace ctermbg=red guibg=red
" function! ShowTrailingWhiteSpace ()
"         :highlight ExtraWhitespace ctermbg=red guibg=red
"         :match ExtraWhitespace /\s\+$/<cr>
" endfunc        
" to switch off do :match<cr>
" map <leader>j :call ShowTrailingWhiteSpace()<cr>
"
" method 1
function! HighlightTrails()
    highlight ExtraWhitespace ctermbg=grey guibg=grey
    " match ExtraWhitespace /\s\+$/
    autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
    autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
    autocmd InsertLeave * match ExtraWhitespace /\s\+$/
    autocmd BufWinLeave * call clearmatches()
endfunction
" autocmd FileType gitcommit call HighlightTrails()
autocmd FileType c,cpp call HighlightTrails()


" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
" "let g:mapleader = ","
"
map <leader>gf :e <cfile><cr>

autocmd FileType xml vmap <leader>a s/<\(.*\)>$/<!--\1-->/

" search for code references 
map <leader>g  yiw:grep <C-R>" .<cr>
map <leader>r  yiw:grep -w <C-R>" drivers/infiniband/sw/rxe/<cr>
map <leader>rr  yiw:grep -w <C-R>" include drivers/infiniband/ drivers/net/ethernet/mellanox<cr>
" map <leader>r  yiw:grep -w <C-R>" .<cr>
" map <leader>rr yiw:grep    <C-R>" .<cr>
" map <leader>r yiw:grep -w <C-R>"  . --include=*.cpp --include=*.h --include=*.hpp --exclude=*tags --exclude=*.diff --exclude-dir=*output* --exclude-dir=*git*<cr>
" map <leader>rr yiw:grep   <C-R>" . --include=*.cpp --include=*.h --include=*.hpp --exclude=*tags --exclude=*.diff --exclude-dir=*output* --exclude-dir=*git*<cr>

" Fast saving
" nmap <leader>w :w!<cr>

" Fast editing of the .vimrc
map <leader>m :source ~/.vimrc<CR>
map <leader>e :tabedit ~/.vim/vimrc<CR>
map <leader>s :tabedit ~/.vim/vim_symbols.txt<CR>
" map <leader>f :!figlet -m0 -f small 
" vmap <leader>f y:!figlet -m0 -f small <C-R>"  > x <CR> :r x<CR> :!rm -f x<cr><cr>
vmap <F1> y:!figlet -m0 -f small <C-R>"  > x <CR> :r x<CR> :!rm -f x<cr><cr>
vmap <F1><F1> y:!figlet -m0 <C-R>"  > x <CR> :r x<CR> :!rm -f x<cr><cr>

function! Insert_indent_symbol (number)
   let v=a:number 
   let s='r! sed -n '.v.'p ~/.vim/vim_indent_symbols.txt'
"    echom s
   exec s
endfunc

function! Insert_vim_symbol (number)
   let v=a:number 
   let s='r! sed -n '.v.'p ~/.vim/vim_symbols.txt'
"    echom s
   exec s
endfunc

map <leader>ll :call Insert_vim_symbol(1)<CR>
map <leader>l1 :call Insert_indent_symbol(1)<CR>
map <leader>l2 :call Insert_indent_symbol(2)<CR>
map <leader>l3 :call Insert_indent_symbol(3)<CR>
map <leader>l4 :call Insert_indent_symbol(4)<CR>
map <leader>l5 :call Insert_indent_symbol(5)<CR>
com! -nargs=1 I call Insert_indent_symbol(<f-args>)
" map <leader>k :call Insert_indent_symbol(v:count1)<CR>
vmap / y/<C-R>"<CR>

set smartindent
set cindent

set ic

"   __       _     _  _             
"  / _| ___ | | __| |(_) _ _   __ _ 
" |  _|/ _ \| |/ _` || || ' \ / _` |
" |_|  \___/|_|\__,_||_||_||_|\__, |
"                             |___/ 
function! FoldAllFunctions ()
    :set foldmethod=syntax
    :set foldnestmax=1
endfunc    

function! UnFoldAllFunctions ()
    :set foldmethod=manual
    :normal zE
endfunc    

map <F4> : call FoldAllFunctions ()<cr>
map <S-F4> : call UnFoldAllFunctions ()<cr>

function! SelectCodeBlock () 
    :normal va{=``
endfunc
nnoremap <F7> : call SelectCodeBlock ()<cr>
set foldcolumn=1

"
"  vimdiff
"       _            _  _   __   __ 
" __ __(_) _ __   __| |(_) / _| / _|
" \ V /| || '  \ / _` || ||  _||  _|
"  \_/ |_||_|_|_|\__,_||_||_|  |_|  
"                                   
"
" to ignore white space :set diffopt+=iwhite
if &diff 
    colorscheme molokai
"     colorscheme candycode
    map [p ]c
    map ]p [c
    map [B ]c
    map [A [c
    map <C-Down> ]c
    map <C-Up>   [c
    map [C :wincmd w<cr>
    map [D :wincmd w<cr>
    map <C-Right> :wincmd w<cr>
    map <C-Left>  :wincmd w<cr>
else
    map <C-Down>   ]]zz
    map <C-Up>     [[zz
    "     map <C-S-Down> ]}
    "     map <C-S-Up>   [{
    map [C :tabnext<CR> 
    map [D :tabprevious<CR> 
    map <C-Right> :tabnext<CR> 
    map <C-Left>  :tabprevious<CR> 
endif

" prevent readonly mode. preffered when using git vimdiff 
set noro

"------- view patch file side by side -------------------------
" open the patch file and press : ,vd
function! Vimdiff()
    let lines = getline(0, '$')
    let la = []
    let lb = []
    for line in lines
        if line[0] == '-'
            call add(la, line[1:])
        elseif line[0] == '+'
            call add(lb, line[1:])
        else
            call add(la, line)
            call add(lb, line)
        endif
    endfor
    tabnew
    set bt=nofile
    vertical new
    set bt=nofile
    call append(0, la)
    diffthis
    exe "normal \<C-W>l"
    call append(0, lb)
    diffthis
endfunction
autocmd FileType diff       nnoremap <silent> <leader>vd :call Vimdiff()<CR>
"------- view patch file side by side -------------------------


function! Auto_comp_paren ()
   inoremap ( ()<esc>i
   inoremap < <><esc>i
   inoremap [ []<esc>i
   inoremap " ""<esc>i
   inoremap ' ''<esc>i
   inoremap { {<CR>}<esc><up>o 
endfunc


function! Auto_comp_paren_disable ()
   inoremap ( (
   inoremap < <
   inoremap [ [
   inoremap " "
   inoremap ' '
   inoremap { {
endfunc

function! SetIndent (indent) 
   let v=a:indent 
   execute 'set tabstop='.v
   execute 'set shiftwidth='.v
endfunc
com! -nargs=1 II call SetIndent(<f-args>)

" nice indent trick
" select code and press :!columnt -t
" to align a = b lines.

set ruler
set wildmenu
set laststatus=2
" set statusline=%<%F\ %h%m%r%=%-14.(\[%l:%L\]\[%c\]%)\ %P
set statusline=%<%F\ %h%m%r%=%-14.(\[%l:%L\]\[%v\]%)\ %P

" set guifont=* to get a list of options.
" set guifont?  to get the currently used font.
" set guifont=Monospace\ 13
" set guifont=FreeMono\ 11
" set guifont=Courier\ 10\ Pitch\ 13
" set guifont=Liberation\ Mono\ 11
" set guifont=Nimbus\ Mono\ L\ 11
" set guifont=Nimbus\ Mono\ L\ Bold\ 11
" au FileType txt  set guifont=set guifont=Fixed\ Bold\ 13
" au FileType perl set guifont=VL\ Gothic\ 13
" au FileType txt set guifont=WenQuanYi\ Micro\ Hei\ Mono\ 12
" au FileType git,diff    set guifont=VL\ Gothic\ 13
"
" use this at mtr
" set guifont=VL\ Gothic\ 16
set guifont=VL\ Gothic\ 13

" set guifont=Monospace\ 13
"
" au FileType c,cpp,sh    set guifont=VL\ Gothic\ 14
" au FileType vim set guifont=VL\ Gothic\ 14
" au FileType gitconfig set guifont=VL\ Gothic\ 14
" au FileType gitcommit set guifont=VL\ Gothic\ 14
" au FileType conf set guifont=VL\ Gothic\ 14
au FileType txt set guifont=Monospace\ 11

set guioptions+=b

"
" TABS
"  _____  _    ___  ___
" |_   _|/_\  | _ )/ __|
"   | | / _ \ | _ \\__ \
"   |_|/_/ \_\|___/|___/
"
"
" setting this will cause :sb <buf number> to open buffers in new tabs
" set switchbuf=split,usetab,newtab
" open files with 'e' in new tabs
" au BufAdd,BufNewFile * nested tab sball

"
" relocate tabs using f9 and f10
"
function! TabMove(direction)
   " get number of tab pages.

   let ntp=tabpagenr("$")

   " move tab, if necessary.
   if ntp > 1

      " get number of current tab page.
      let ctpn=tabpagenr()

      " move left.
      if a:direction < 0
         let index=((ctpn-1+ntp-1)%ntp)
      else
         let index=(ctpn%ntp)
      endif

      " move tab page.
      execute "tabmove ".index

   endif
endfunction
" map <F9> :call TabMove(-1)<CR>
" map <F10> :call TabMove(1)<CR>

map <C-S-Left>  :execute "tabmove" tabpagenr() - 2 <CR>
map <C-S-Right> :execute "tabmove" tabpagenr() <CR>
" map <S-F9>  :execute "tabmove" tabpagenr() - 2 <CR>
" map <S-F10> :execute "tabmove" tabpagenr() <CR>
map <S-w> :tabedit
map <S-w><S-w> :tabclose!<cr>
" map <C-S-w> :bd<CR>
"
" map <S-right> :tabnext<CR>
" map <S-left> :tabprevious<CR>

function! DeleteAllBuffers ()
    execute "1,100bd"
endfunction
com! BD call DeleteAllBuffers()

function! RestartSess ()
   call DeleteAllBuffers ()
   execute "source Session.vim"
endfunction
com! RestartSession call RestartSess()

nnoremap ml : call RestartSess () <cr>

" file buffers
nnoremap <A-down> :bnext<CR>
nnoremap <A-up> :bprevious<CR>
nnoremap <S-F8> :ls<cr>

" tag browsing
nnoremap <C-S-Up> :pop<CR>
nnoremap <C-S-Down> :tag<CR>
nnoremap <A-up> :bprevious<CR>
" nnoremap <F6> :bprevious<CR>
nnoremap <S-F6> :ts<cr>


function! ToggleQuickFix()
  if exists("g:qwindow")
"     lclose
    ccl
    unlet g:qwindow
  else
    copen
    let g:qwindow = 1
"     try
"       lopen 10
"       let g:qwindow = 1
"     catch
"       echo "No Errors found!"
"     endtry
  endif
endfunction

nmap <script> <silent> <F6> :call ToggleQuickFix()<CR>

" tags
"  _____  _    ___  ___
" |_   _|/_\  / __|/ __|
"   | | / _ \| (_ |\__ \
"   |_|/_/ \_\\___||___/
"
"
" open a tag under the cursor in a new tab
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <S-F11> :tp<cr>
map <S-F12> :tn<cr>
nnoremap <silent> <F8> :TlistToggle<CR>
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_WinWidth = 50
let Tlist_Show_One_File = 1
let Tlist_Sort_Type = "name"

"for tags to show up only once
" let tttt=system("pwd").'/tags'
" exec 'set tags='.tttt
set tags=tags

" complete words from tag file with <ctrl>x<ctrl>k<ctrl>n
set complete+=t

function! SetBreakPoint ()
    "let taskpath=$TASK_PATH
    "     execute "silent !echo b " .  "%:t" . ":" . line(".")  ">>" . taskpath . "/.gdb_breakpoints"
    execute "silent !echo b " .  "%:t" . ":" . line(".")  ">>" . ".gdb_breakpoints"
endfunc
" com! B call SetBreakPoint()
map <S-B> :call SetBreakPoint()<cr>

" help vim commands
" -------------
" vab - will visual select inner block including block limiters
" vib - will select the same but without the limiters
"   the limiters for example of ( text ) are the brackets or in
"   [ text ] are the square brackets
"
" :tab ba will open all buffers with tabs
"

set runtimepath^=~/.vim/bundle/ctrlp.vim

" change directory to current file location
" lcd %:h will change only for current file
map cdf :cd %:h<cr>
map <leader>a <esc>ggVG<CR>
map <leader>x :!chmod a+x %<cr>

" show the byte offset in the status line
" use :goto <offset> to get to a specific offset.
set statusline+=%o

" hex view with :%!xxd and back with :%!xxd -r

" visual block select can select blank lines
" you can also just start a visual block and press END
" then all lines will be chosen till their end
" set virtualedit=all


" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
   let @/ = ''
   if exists('#auto_highlight')
     au! auto_highlight
     augroup! auto_highlight
     setl updatetime=4000
     echo 'Highlight current word: off'
     return 0
  else
    augroup auto_highlight
    au!
    au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
  return 1
 endif
endfunction

" disable changing directory when opening a file with netrw explore
" you can also browse files with :e [ctrl-d]
let g:netrw_keepdir= 1
" setup to filer out source files.
" use 'a' to cycle trough [show-all]->[show-filtered]->[dont show filered]
let g:netrw_list_hide= '\.[ch]$'

" ------------------------
"  cscope
"  -------------------------
source ~/.vim/cscope.vim
" shortcut for cscope search where method under cursor is being called.
" map <leader>fc :cs f c <cword><CR>

" shortcut for cscope search of where symbol under cursor appears
" map <leader>fs :cs f s <cword><CR>
" map <leader>ft :cs f t <cword><CR>
" vmap <leader>ft y:cs f t <C-R>"<CR>

" ----------------------
"  enable bash aliases from vim shell
" ----------------------
" option (1) from vim
" :set shellcmdflag=-ic
"
" option (2) from vim
" :set shell=/bin/bash\ -i
"
" option (3) : add this to your bashrc
" the line  : shopt -s expand_aliases
" and in .vimrc do this :
"  let $BASH_ENV = "~/.bashrc"
"



"---------------------------------------
"     preset registers
"-------------------------------------
let @p = 'printk("--->%s()%d:\n", __func__, __LINE__);' . "\n"
" call setreg('p', 'printk("--->%s()%d:\n", __func__, __LINE__);`[j')
let @l =  "⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n"
let @y = "Signed-off-by: Yonatan Cohen <yonatanc@mellanox.com>\n" 
let @h = "◀╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌" 
let @b = "┌⎯⎯⎯⎯⎯┐\n│     │\n│     │\n│     │\n└⎯⎯⎯⎯⎯┘"
let @s = "<<<<<"


" ------------------------------
" machine specific configuratio
" ------------------------------
let hostname=system('hostname -s')
" let realvim = '~/share/ipteam_env/vim/.vimrc.' . hostname
" let realvim = '/.autodirect/mtrswgwork/yonatanc/ipteam_env/vim/.vimrc.' . hostname
" execute 'echo realvim'
" exec 'source ' .  realvim

" if filereadable(realvim)
" exec 'source ' .  realvim
" else
" exec 'echo "no" realvim'
" endif

" Help
"  _  _       _
" | || | ___ | | _ __
" | __ |/ -_)| || '_ \
" |_||_|\___||_|| .__/
"               |_|
"
" -----------------------------------
" ctrl-p addOn for finding files.
" -----------------------------------
" ctrl-r : change between search fixed pattern to regex
" ctrl-d : change between search directory to file.
" ctrl-b : change between search of files or open buffers
" to start ctrlp with a different path than current-working-directory
" :Ctrl <you chosen path>
let g:ctrlp_by_filename = 1
let g:ctrlp_max_files=0
let g:ctrlp_max_depth=40
" -----------------------------------
" f8 addOn 
" -----------------------------------
" opens a left pane (window) to help navigate function,classes in current
" file.
"
" ----------------------------------
"  gitgrep addOn
"  ---------------------------------
"  ,gw does gitgrep on word under curser
"
