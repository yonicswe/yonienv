[user]
	author = Yonatan Cohen
	name = Yonatan Cohen
	email = yonatanc@mellanox.com

# accepted values are two of
# normal, black, red, green, yellow, blue, magenta, cyan, white
# and optionally one of
# bold, dim, ul, blink and reverse
[color]
	status = auto
	branch = auto
	diff = auto

[color "grep"]
    linenumber = yellow bold
    match = red
    filename = magenta

[color "diff"]
  meta = yellow
  frag = magenta bold
  old = red
  new = blue
  whitespace = magenta reverse

[color "status"]
  added = yellow
  changed = red
  untracked = cyan

[alias]
    s = status -uno
    su = status -u
    listmodified = diff --name-only
    listcached = diff --cached --name-only
    g = grep --color
    # d = diff --color
    d = diff
    dg = difftool --tool=gvimdiff
    dgfile = difftool --tool=gvimdiff --no-prompt
    dv = difftool --tool=vimdiff
    dc = diff --cached
    dcg = difftool --tool=gvimdiff --cached
    dt = difftool
    mt = mergetool
    ds = diff --stat
    ss = show --stat
    b = branch -vv
    bdelete = branch -D 
    brename = branch -M
    r = remote -vv
    c = checkout
#   commityoni = "!f() { \
#		    git config commit.template ~/share/yonienv/git_commit_template_yonic; \
#		    git commit; \
#		  }f"
#   commitmlx = "!f() { \
# 		    git config commit.template ~/share/yonienv/git_commit_template; \
# 		    git commit; \
#		  }f"
    commitempty = commit --allow-empty
 
    a = "!f() {                \
 	   if [ -z $1 ] ; then \
	      git add -u ;     \
           else                \
	      git add $1 ;     \
           fi;                 \
	   }; f"	   

    push-commit = "!f() {                 \
 	   if [ -z $1 ] ; then            \
	      git push origin HEAD:master;\
           else                           \
	      git push orign $1:master;   \
           fi;                            \
	   }; f"	   

# listtrackedfiles = ls-tree --name-only -r 
    listtrackedfiles = "!git ls-files"

#   ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate 
    ls = log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short

    amend = commit --amend --no-edit
    unstage = reset HEAD
    uncommit = reset HEAD^

    # discardall = checkout HEAD -- .
    discard = "!f() {              \
       if [ -z $1 ] ; then         \
          git checkout HEAD -- . ; \
       else                        \
          git checkout $1 ;        \
       fi;                         \
    }; f" 

    head = log -n1 --pretty=oneline
    untrackfile = rm --cached 
#                                 SHA          date     name             msg
    ll =   log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short

    l =  "!f() {                             \
      if [ -z $1 ] ; then                             \
         git log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short;  \
      else                                            \
         git log -n $1 --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short;  \
      fi ;                                            \
    }; f"



    l10 = log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s ' --date=short -n10
    l20 = log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s ' --date=short -n20
    l30 = log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s ' --date=short -n30
    lf = log --pretty=short
    #   l = log --pretty=format oneline
    #   l10 = log --pretty=oneline -n10
    #   l30 = log --pretty=oneline -n30
    # ll = log --pretty=oneline --graph --decorate --abbrev-commit
    # ll = log --graph --decorate --pretty=format:"%h %an, %ar - %s"
    gl = log --graph --full-history --all --color --pretty=format:%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s
    gls = log --graph --full-history --all --color --pretty=format:%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s --simplify-by-decoration

    lnameonly = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    diffnameonly = "!f() { git show $1 |diffstat -p1 -l; }; f"

    # diffcommit = "!f() { git difftool $1^..$1 --tool=gvimdiff; }; f"
    diffcommit =  "!f() {                                   \
      if [ -z $1 ] ; then                                   \
         git difftool HEAD^..HEAD --tool=gvimdiff --prompt; \
      else                                                  \
         git difftool $1^..$1 --tool=gvimdiff --prompt;     \
      fi ;                                                  \
    }; f"

    # diffcommitfile = "!f() { git difftool $1^..$1 --tool=gvimdiff $2;}; f"
    diffcommitfile = "!f() {                                \
	if [ $# -eq 1 ] ; then                              \
	   git difftool HEAD^..HEAD --tool=gvimdiff -y $1 ; \
	else                                                \
    	   git difftool $1^..$1 --tool=gvimdiff -y $2;      \
	fi;                                                 \
    }; f"

    format-patch-commit = "!f() {              \
	if [ $# -eq 0 ] ; then                 \
	   git format-patch HEAD^..HEAD ;      \
	else                                   \
	   git format-patch $1^..$1 ;          \
        fi;                                  \
    }; f"

    cherry-pick-commit = "!f() {              \
	if [ $# -gt 0 ] ; then                 \
	   git cherry-pick $1^..$1 ;          \
        fi;                                  \
    }; f"

    edit = "!f() { GIT_EDITOR=/.autodirect/mtrswgwork/yonatanc/yonienv/bin/gitedit.sh git rebase -i $1^; }; f"

    lg = !git lg1
    lg1 = !git lg1-specific --all
    lg2 = !git lg2-specific --all
    lg3 = !git lg3-specific --all

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim red)- %an%C(reset)%C(yellow)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(bold yellow)%d%C(reset)%n'' %C(white)%s%C(reset)%n'' %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'


    rlog = log --show-notes=review

    commitfilelist = show --stat --oneline

    sl = stash list

    pushlist = "!f() { \
		if [ $# -gt 0 ] ; then  \
			echo git diff --stat --cached $1/$2 ; \
			git diff --stat --cached $1/$2 ; \
		else \
			echo git diff --stat --cached origin/master ; \
			git diff --stat --cached origin/master ; \
		fi; \
		}; f"

    branch-upstream-kernel-rdma-next-mlx = "!f() { git fetch origin rdma-next-mlx ; git c -b $1@rdma-next-mlx FETCH_HEAD ; }; f"
    branch-rdmacore-for-upsteam = "!f() { git fetch origin for-upstream ; git c -b $1@for-upstream FETCH_HEAD ; }; f"


[core]
    editor = vim

[diff]
#   tool = kdiff3
    tool = vimdiff

[merge]
    tool = gvimdiff


[difftool]
	prompt = true

[commit]
# template = ~/share/yonienv/git_commit_template

[credential]
#	helper = wincred

[push]
	default = matching
[core]
	whitespace = trailing-space,space-before-tab,indent-with-non-tab
[gc]
	autoDetach = false
[grep]	
	linenumber = true


[sendemail]
#       smtpserver = /usr/local/bin/msmtp-enqueue.sh
	suppresscc = self
	signedoffbycc = true
	cccover = true
	tocover = true
	chainReplyTo = false
	confirm = always
	from = Yonatan Cohen <yonatanc@mellanox.com>
	envelopeSender = Yonatan Cohen <yonatanc@mellanox.com>
	signingkey = yonatanc@mellanox.com
[gpg]
	program = gpg2
